name: Integration Test for Operator Upgrade

on: workflow_call

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'
      packages: 'read'

    steps:
      - name: Set env and tools
        run: |
          echo "TESTNAMESPACE=op-test-upgrade-$(date +%s)" >> $GITHUB_ENV

      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1.0.0'
        with:
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          access_token_lifetime: 600s

      - name: Use the GKE Autopilot test cluster
        uses: 'google-github-actions/get-gke-credentials@v1.0.0'
        with:
          cluster_name: 'dev-integrationtesting'
          location: 'us-central1'

      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setting up kubeconfig ENV for Github Chaos Action
        run: echo ::set-env name=KUBE_CONFIG_DATA::$(base64 -w 0 ~/.kube/config)
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Deploy Operator
        run: |
          sleep 10
          echo "starting deployment"
          for i in {1..3}; do
          kubectl cluster-info
          kubectl get pods -n kube-system
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}
          kubectl get ns pubsubplus-operator-system || kubectl create ns pubsubplus-operator-system
          if kubectl get deployment pubsubplus-eventbroker-operator -n pubsubplus-operator-system; then
           echo "pubsubplus-eventbroker-operator is already deployed"
           break
          else
           kubectl apply -f <(kubectl create secret generic regcred --from-file=.dockerconfigjson=${HOME}/.docker/config.json --type=kubernetes.io/dockerconfigjson -n pubsubplus-operator-system --dry-run=client -o yaml)
           make deploy | grep 'created \| configured'
           kubectl rollout status deployment pubsubplus-eventbroker-operator -n pubsubplus-operator-system --timeout=240s
           if [ $? -eq 0 ]; then
             break
           else
             echo "Rollout status check failed, retrying in 20 seconds..."
             sleep 20
           fi
          fi
          done

      - name: Create nonHA deployment with image tag "latest"
        run: |
          for i in {1..3}; do
            kubectl create ns $TESTNAMESPACE && kubectl config set-context --current --namespace=$TESTNAMESPACE
            kubectl apply -f ci/manifests/eventbroker-upgrade-update.yaml | grep "test-nonha-upgrade-update"
            sleep 5
            if kubectl wait pods --selector app.kubernetes.io/instance=test-nonha-upgrade-update --for condition=Ready --timeout=120s | grep "condition met"; then
              kubectl get po -n $TESTNAMESPACE --show-labels | grep test-nonha-upgrade-update | grep "1/1"
              kubectl get po -n $TESTNAMESPACE --show-labels | grep test-nonha-upgrade-update | grep active=true
              kubectl get sts -n $TESTNAMESPACE | grep test-nonha-upgrade-update
              kubectl get svc -n $TESTNAMESPACE | grep LoadBalancer
              kubectl port-forward svc/test-nonha-upgrade-update-pubsubplus -n $TESTNAMESPACE 55555:55555 &
              sleep 5
              curl -O https://sftp.solace.com/download/SDKPERF_C_LINUX64
              tar -xvf SDKPERF_C_LINUX64
              pubSubTools/sdkperf_c -cip=tcp://localhost:55555 -mn=1000 -mr=0 -ptl=t1 -stl=t1 | grep "Total Messages"
              break
            else
              echo "Deployment failed, retrying in 5 seconds..."
              sleep 5
            fi
          done

      - name: Upgrade nonHA deployment to a compatible image tag - expecting automated upgrade
        run: |
          REPO=solace/solace-pubsub-standard
          # grab a tag from Docker Hub that has the same SHA as "latest", so upgrade is easy
          DOCKERHUBRESULTS=`curl --silent "https://hub.docker.com/v2/repositories/$REPO/tags?page_size=1000" | jq -r '.results[] | "\(.digest) \(.name)"' | sort`
          SHA=`echo "$DOCKERHUBRESULTS" | grep latest | awk '{print $1;}'`
          UPGRADETAG=`echo "$DOCKERHUBRESULTS" | grep $SHA | head -n 1 | awk '{print $2;}'`; echo "Upgrade version: ${UPGRADETAG}"
          # overwrite the upgrade version, then apply manifest
          sed -i "s/latest/\"${UPGRADETAG}\"/" ci/manifests/eventbroker-upgrade-update.yaml
          kubectl apply -f ci/manifests/eventbroker-upgrade-update.yaml -n $TESTNAMESPACE | grep "test-nonha-upgrade-update"
          sleep 10; kubectl get all
          while ! kubectl get po | grep "0/1" ; do sleep 1 ; done
          kubectl get all          
          for i in {1..3}; do
            kubectl wait pods --selector app.kubernetes.io/instance=test-nonha-upgrade-update --for condition=Ready --timeout=220s
            if [ $? -eq 0 ]; then
              echo "Pods are ready."
              break
            else
              echo "Waiting for pods failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          kubectl get po -n $TESTNAMESPACE --show-labels | grep test-nonha-upgrade-update | grep "1/1"
          kubectl get po -n $TESTNAMESPACE --show-labels | grep test-nonha-upgrade-update | grep active=true
          kubectl get po -n $TESTNAMESPACE -o yaml | grep "image: ${REPO}:${UPGRADETAG}"
          pkill -f "port-forward"; kubectl port-forward svc/test-nonha-upgrade-update-pubsubplus -n $TESTNAMESPACE 55555:55555 &
          pubSubTools/sdkperf_c -cip=tcp://localhost:55555 -mn=1000 -mr=0 -ptl=t1 -stl=t1 | grep "Total Messages"

      - name: Update deployment service type - expecting automated update with no pod restart
        run: |
          # overwrite the service type, then apply manifest
          sed -i "s/LoadBalancer/NodePort/" ci/manifests/eventbroker-upgrade-update.yaml
          kubectl apply -f ci/manifests/eventbroker-upgrade-update.yaml | grep "test-nonha-upgrade-update"
          sleep 10; kubectl get all
          kubectl get svc -o yaml -n $TESTNAMESPACE | grep NodePort
          pkill -f "port-forward"; kubectl port-forward svc/test-nonha-upgrade-update-pubsubplus -n $TESTNAMESPACE 55555:55555 & 
          pubSubTools/sdkperf_c -cip=tcp://localhost:55555 -mn=1000 -mr=0 -ptl=t1 -stl=t1 | grep "Total Messages"

      - name: Delete broker deployment
        run: |
          # show any error in the operator logs          
          kubectl delete eventbroker test-nonha-upgrade-update -n $TESTNAMESPACE | grep deleted
          kubectl delete ns $TESTNAMESPACE --ignore-not-found
